{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Assignment 2019\n",
    "Programming for Data Analysis\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This contains all of the information for my 2019 submission for the Assignment for Programming for Data Analysis module.  Work on this began 13th October 2019 with a final submission date of November 11th."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NumPy, short for “Numerical Python” is a free to use, open source numerical library in python.  The library contains a large number of mathematical, algebriac and transformational functions.  Numpy contains a multi-dimensional array (more than one list, a list that can hold other lists, or lists within lists) and matrix data structures (numbers arranged in rows and columns).  Anaconda comes with NumPy preinstalled.  Otherwise it is necessary to install it via the pip install NumPy command line code.  Then import as np when using Python.  NumPy is utilised in data science and machine learning and to perform mathematical and statistical operations.  \n",
    "\n",
    "NumPy. Random is a module used for random sampling in NumPy, providing a way of creating random samples with the NumPy.   It gives a variety of functions to generate random numbers.  \n",
    "\n",
    "But the numbers may not be actually random, they just appear to be.  They may be pseudorandom or PRNG.  Pseudorandom number generators are algorithms that produce numbers that appear random, but are not really.  If the seed is reset each time (np.random.seed(0) ), the same set of numbers will always appear.  If random seed is not reset, different numbers will appear each time.   NumPy will generate a seed value from a part of your computer system such as the clock.\n",
    "\n",
    "The random function can be used to build customized random number generators, it’s the key ingredient for many of the functions in the random module.  Random adds unpredictability to simulations such as the Monte Carlo simulation.  In a Monte Carlo simulation, a model is built showing the different outcomes that are probable.  The process can be complicated and not easy to predict due to random variables.  It is also known as multiple probability simulation.  Monte Carlo method was the first approach to use computer simulation for statistical problems. It was developed by John von Neumann, Stanisław Ulam, & Nicholas Metropolis, working on the Manhattan project during World War II.  \n",
    "\n",
    "Random sampling can be broken down into 4 further sections, as per SciPy.org., which themselves then contain further subdivisions.  These are Simple random data, Permutations, Distributions and Random generator.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Simple Random Data generates random values, integers and floats which are dependant on the selected function.  Which function to use will be determined by the data used and what is the required output. \n",
    "Rand will return values in a given shape from a predetermined parameter (uniform distribution). Here I have asked for random numbers in three columns and two rows. As a default, the numbers returned will be more than 0 but less than 1  But first NumPy has to be imported.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.57034684, 0.49466192],\n",
       "       [0.67632838, 0.15708952],\n",
       "       [0.88231927, 0.63901121]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.rand(3,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here I have asked for 100 random numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.31475665, 0.28057396, 0.00416955, 0.30438445, 0.10313957,\n",
       "       0.0937574 , 0.9889356 , 0.32266401, 0.43517471, 0.06899413,\n",
       "       0.01771431, 0.05273595, 0.46404824, 0.62918718, 0.25546365,\n",
       "       0.6147481 , 0.10078492, 0.37575569, 0.95780187, 0.97915892,\n",
       "       0.29655941, 0.24887153, 0.31229321, 0.91089012, 0.25425856,\n",
       "       0.46656453, 0.19383885, 0.51500781, 0.54046598, 0.29593151,\n",
       "       0.28917663, 0.14838033, 0.81843862, 0.32747332, 0.8079942 ,\n",
       "       0.92093488, 0.47197355, 0.02682165, 0.05547387, 0.32690717,\n",
       "       0.70279567, 0.34743165, 0.79301071, 0.06304855, 0.1734637 ,\n",
       "       0.44931306, 0.4548006 , 0.23230763, 0.57331753, 0.73384545,\n",
       "       0.53671105, 0.26138722, 0.74770666, 0.61782084, 0.26654882,\n",
       "       0.702193  , 0.53425225, 0.1182004 , 0.54732877, 0.64605691,\n",
       "       0.32903685, 0.25284087, 0.53193031, 0.46576979, 0.9032834 ,\n",
       "       0.87614721, 0.36155967, 0.06594534, 0.96175959, 0.28189545,\n",
       "       0.9880729 , 0.48864906, 0.43214249, 0.02791125, 0.88788227,\n",
       "       0.50975013, 0.95944131, 0.15766599, 0.51502179, 0.75642566,\n",
       "       0.48958606, 0.55721722, 0.61449866, 0.75485295, 0.73166327,\n",
       "       0.55782335, 0.92361115, 0.14886718, 0.16300277, 0.92083076,\n",
       "       0.30576953, 0.94628599, 0.49217407, 0.44606016, 0.8915909 ,\n",
       "       0.46338393, 0.97350071, 0.78545392, 0.96192788, 0.26725382])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.random.rand (100)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.hist(x)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " numpy.random.randn() return a sample (or samples) from a specific/standard normal distribution, the standard distribution.  It is  useful for adding random noise element into a dataset for initial testing of a machine learning model.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.39605534, -0.22097767,  0.58002588, -0.80528098, -0.0165553 ,\n",
       "        0.24587617, -0.05664043, -0.82344695,  0.76082729,  2.86854224,\n",
       "       -1.93830828,  0.11108886, -0.27511768, -1.01787165, -0.85730644,\n",
       "       -0.03591561,  0.31756498,  0.16238757,  0.17635778,  0.59033529,\n",
       "       -0.14276091,  0.30282827, -1.02768826,  1.62574305,  1.97851678,\n",
       "       -0.64541669,  1.67131053, -0.27667158, -1.49368808, -1.38299743,\n",
       "        0.70919819, -0.37989518,  0.89379823,  0.57028884,  0.71837117,\n",
       "        0.82431892,  1.11268622, -0.77197849,  0.42738003,  0.97227177,\n",
       "        0.74157985,  1.37632241,  0.45170218,  1.229072  ,  1.26605501,\n",
       "        1.5821532 ,  1.17687766, -1.14334942,  1.41807406, -0.10719735,\n",
       "       -1.87092601, -0.46558917, -0.8847469 , -2.15323648,  0.17590682,\n",
       "        0.07509393, -0.53124773, -1.29608936, -0.3482748 , -0.08785005,\n",
       "        0.1891333 , -0.12953899,  0.82884292,  0.58394743,  1.78173165,\n",
       "        0.09744462, -0.12795199, -1.70144588,  0.86371623,  0.64688361,\n",
       "       -0.60532347, -1.22739436,  1.89751942,  0.08133308, -0.14629322,\n",
       "       -0.33955125,  0.24744798,  0.86963322,  0.0849931 , -1.60381758,\n",
       "       -0.2630348 , -0.04136607, -0.57235131, -1.19253769, -0.01719543,\n",
       "       -1.28693615,  0.57925554, -0.08523313,  0.00923963, -0.67721878,\n",
       "       -0.10759181,  1.48853714, -0.1164113 ,  1.79067806,  0.18218244,\n",
       "       -1.09789459, -1.00377205, -0.36879532, -3.04992815, -1.96764244])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.random.randn (100)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(x)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "numpy.random.randint returns a random integer in the provided range, here I have given it 1 to 100 to select from.  If you were trying to simulate the throw of a dice, you would use (1, 6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.random.randint(1,100)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A dice was rolled 10000 times and 6 was the largest number rolled\n",
    "\n",
    "import scipy.stats\n",
    "import sympy.stats\n",
    "dice = scipy.stats.randint(1, 7)\n",
    "dice.rvs(10000).max()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
rm  "metadata": {},
   "source": [
    "numpy.random.random_integers is similar to random_integers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
@@ -298,10 +19,10 @@
    {
     "data": {
      "text/plain": [
       "2"
       "1"
      ]
     },
     "execution_count": 9,
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -319,7 +40,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
@@ -333,12 +54,12 @@
    {
     "data": {
      "text/plain": [
       "array([[ 7, 13],\n",
       "       [ 4,  3],\n",
       "       [ 2, 12]])"
       "array([[ 9,  9],\n",
       "       [ 4,  8],\n",
       "       [ 7, 11]])"
      ]
     },
     "execution_count": 10,
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -361,7 +82,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
@@ -370,7 +91,7 @@
       "<function RandomState.random_sample>"
      ]
     },
     "execution_count": 11,
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -381,7 +102,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
@@ -390,7 +111,7 @@
       "<function RandomState.random_sample>"
      ]
     },
     "execution_count": 12,
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -401,7 +122,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
@@ -410,7 +131,7 @@
       "<function RandomState.random_sample>"
      ]
     },
     "execution_count": 13,
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -421,7 +142,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
@@ -430,7 +151,7 @@
       "<function RandomState.random_sample>"
      ]
     },
     "execution_count": 14,
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -441,7 +162,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
@@ -450,7 +171,7 @@
       "True"
      ]
     },
     "execution_count": 15,
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -461,7 +182,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
@@ -470,7 +191,7 @@
       "True"
      ]
     },
     "execution_count": 16,
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -481,7 +202,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
@@ -490,7 +211,7 @@
       "True"
      ]
     },
     "execution_count": 17,
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -508,16 +229,16 @@
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.06383500264608177"
       "0.2506515182546507"
      ]
     },
     "execution_count": 18,
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -535,19 +256,19 @@
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.34709268, 0.41470131],\n",
       "       [0.73231477, 0.3914567 ],\n",
       "       [0.50600102, 0.4426454 ],\n",
       "       [0.92931912, 0.38725671]])"
       "array([[0.78423728, 0.7581681 ],\n",
       "       [0.96379797, 0.50628879],\n",
       "       [0.35869624, 0.6465866 ],\n",
       "       [0.45371398, 0.50996371]])"
      ]
     },
     "execution_count": 19,
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -572,16 +293,16 @@
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 6, 2, 4])"
       "array([0, 3, 2, 0])"
      ]
     },
     "execution_count": 20,
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -599,14 +320,14 @@
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Black', 'Red', 'Green', 'Red', 'Red', 'Black', 'Red', 'Green', 'Red', 'Black', 'Black', 'Red']\n"
      "['Red', 'Black', 'Red', 'Red', 'Red', 'Red', 'Black', 'Black', 'Black', 'Black', 'Black', 'Black']\n"
     ]
    }
   ],
@@ -626,16 +347,16 @@
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "b'\\xda\\xa2/\\xf4e'"
       "b'h\\x88\\x8f]p'"
      ]
     },
     "execution_count": 22,
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -653,16 +374,16 @@
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "b'\\x11T\\x13\\x10'"
       "b'\\x11\\x82\\xf3\\x10'"
      ]
     },
     "execution_count": 23,
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -681,16 +402,16 @@
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0, 16,  5,  0,  2,  1])"
       "array([ 0, 16,  2,  5,  1,  0])"
      ]
     },
     "execution_count": 24,
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -701,23 +422,23 @@
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[14, 15],\n",
       "array([[ 8,  9],\n",
       "       [12, 13],\n",
       "       [ 6,  7],\n",
       "       [ 4,  5],\n",
       "       [ 2,  3],\n",
       "       [ 0,  1],\n",
       "       [ 4,  5],\n",
       "       [ 6,  7],\n",
       "       [12, 13],\n",
       "       [ 8,  9],\n",
       "       [14, 15],\n",
       "       [10, 11]])"
      ]
     },
     "execution_count": 25,
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -750,7 +471,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
@@ -835,7 +556,7 @@
       "H       Ireland     1"
      ]
     },
     "execution_count": 26,
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -867,7 +588,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
@@ -952,7 +673,7 @@
       "H       Ireland     1"
      ]
     },
     "execution_count": 27,
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -971,7 +692,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
@@ -980,16 +701,16 @@
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5, 6, 4, 2, 0, 1, 3, 7])"
       "array([5, 2, 4, 0, 3, 7, 6, 1])"
      ]
     },
     "execution_count": 29,
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1007,7 +728,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
@@ -1042,31 +763,21 @@
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>2</td>\n",
       "      <th>C</th>\n",
       "      <td>New Zeland</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>France</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>New Zeland</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>England</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>Austraila</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>Wales</td>\n",
       "      <td>5</td>\n",
@@ -1076,23 +787,33 @@
       "      <td>Ireland</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>Austraila</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        country place\n",
       "F         Japan     3\n",
       "G  South Africa     2\n",
       "E        France     4\n",
       "C    New Zeland     5\n",
       "E        France     4\n",
       "A       England     8\n",
       "B     Austraila     7\n",
       "D         Wales     5\n",
       "H       Ireland     1"
       "H       Ireland     1\n",
       "G  South Africa     2\n",
       "B     Austraila     7"
      ]
     },
     "execution_count": 30,
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1110,7 +831,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
@@ -1119,7 +840,7 @@
       "Index(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'], dtype='object')"
      ]
     },
     "execution_count": 31,
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1130,16 +851,16 @@
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['G', 'H', 'B', 'F', 'A', 'C', 'D', 'E'], dtype=object)"
       "array(['D', 'C', 'B', 'F', 'H', 'G', 'E', 'A'], dtype=object)"
      ]
     },
     "execution_count": 32,
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1157,7 +878,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
@@ -1184,33 +905,8 @@
       "      <th>country</th>\n",
       "      <th>place</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>France</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>Wales</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>H</th>\n",
       "      <td>Ireland</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>England</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>Austraila</td>\n",
@@ -1222,27 +918,52 @@
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>England</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>Japan</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>Wales</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>H</th>\n",
       "      <td>Ireland</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>France</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        country place\n",
       "E        France     4\n",
       "D         Wales     5\n",
       "G  South Africa     2\n",
       "H       Ireland     1\n",
       "A       England     8\n",
       "B     Austraila     7\n",
       "C    New Zeland     5\n",
       "F         Japan     3"
       "A       England     8\n",
       "F         Japan     3\n",
       "D         Wales     5\n",
       "H       Ireland     1\n",
       "G  South Africa     2\n",
       "E        France     4"
      ]
     },
     "execution_count": 33,
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1260,7 +981,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
@@ -1295,57 +1016,57 @@
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>New Zeland</td>\n",
       "      <td>5</td>\n",
       "      <th>F</th>\n",
       "      <td>Japan</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>England</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>H</th>\n",
       "      <td>Ireland</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>France</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>Japan</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>G</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>England</td>\n",
       "      <td>8</td>\n",
       "      <th>C</th>\n",
       "      <td>New Zeland</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>Austraila</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E</th>\n",
       "      <td>France</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        country place\n",
       "D         Wales     5\n",
       "C    New Zeland     5\n",
       "H       Ireland     1\n",
       "E        France     4\n",
       "F         Japan     3\n",
       "G  South Africa     2\n",
       "A       England     8\n",
       "B     Austraila     7"
       "H       Ireland     1\n",
       "G  South Africa     2\n",
       "C    New Zeland     5\n",
       "B     Austraila     7\n",
       "E        France     4"
      ]
     },
     "execution_count": 34,
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1363,15 +1084,15 @@
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Password is = arceeer\n",
      "Password is = eabaeebeaaec\n"
      "Password is = cecaerb\n",
      "Password is = aeeebecbaccb\n"
     ]
    }
   ],
@@ -1393,14 +1114,14 @@
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generated password = ['E' 'B' 'A' 'R' 'E']\n"
      "Generated password = ['A' 'C' 'E' 'B' 'R']\n"
     ]
    }
   ],
@@ -1428,7 +1149,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
@@ -1463,7 +1184,7 @@
       " ('New Zeland', 'Draw', 3)]"
      ]
     },
     "execution_count": 37,
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1476,18 +1197,18 @@
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['Ireland', 'England', 'New Zeland'],\n",
       "       ['Win', 'Loose', 'Draw'],\n",
       "       ['1', '2', '3']], dtype='<U10')"
       "array([['Win', 'Loose', 'Draw'],\n",
       "       ['1', '2', '3'],\n",
       "       ['Ireland', 'England', 'New Zeland']], dtype='<U10')"
      ]
     },
     "execution_count": 38,
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1506,12 +1227,12 @@
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
@@ -1574,16 +1295,16 @@
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-2.00926629])"
       "array([-0.76904713])"
      ]
     },
     "execution_count": 40,
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1596,16 +1317,16 @@
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.74093059,  1.95988967, -0.85295255,  1.31080014,  1.03147006])"
       "array([-0.40722262, -0.80426742,  0.90331996,  1.39987931, -0.75626807])"
      ]
     },
     "execution_count": 41,
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1616,7 +1337,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
@@ -1802,7 +1523,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
@@ -1811,7 +1532,7 @@
       "50.01933205582232"
      ]
     },
     "execution_count": 43,
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1823,7 +1544,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
@@ -1832,7 +1553,7 @@
       "97.87262077473541"
      ]
     },
     "execution_count": 44,
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -1844,7 +1565,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
@@ -2102,7 +1823,7 @@
       "        2.29768653e+02,  1.14084286e+02, -7.11789898e+00,  1.07258278e+02])"
      ]
     },
     "execution_count": 45,
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -2114,7 +1835,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
@@ -2178,7 +1899,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
@@ -2188,7 +1909,7 @@
       "       5.90105997, 0.15012927, 6.20731247])"
      ]
     },
     "execution_count": 47,
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -2199,7 +1920,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
@@ -2220,7 +1941,7 @@
       "Text(0, 0.5, 'f(x)')"
      ]
     },
     "execution_count": 48,
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
@@ -2248,7 +1969,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
@@ -2277,7 +1998,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
@@ -2286,7 +2007,7 @@
       "[Text(0, 0.5, 'Occurance Freq'), Text(0.5, 0, 'Poisson')]"
      ]
     },
     "execution_count": 50,
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
@@ -2325,16 +2046,16 @@
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 1, 1, 0, 4, 3]])"
       "array([[2, 0, 4, 1, 2, 1]])"
      ]
     },
     "execution_count": 67,
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
@@ -2347,15 +2068,15 @@
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 1 2 2 3 1]\n",
      " [1 3 2 2 0 2]]\n"
      "[[3 0 0 4 1 2]\n",
      " [0 2 2 0 2 4]]\n"
     ]
    }
   ],
@@ -2383,12 +2104,12 @@
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAD8CAYAAABw1c+bAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAExRJREFUeJzt3X+s3Xd93/Hnq44DW0Fg6ts2in3joEUToZAfvTKpMo2wQTCsi1uVqbY6CAhkjZG13bpJoZOSElSNrVorUdIGt1iBqU1g/Ghd5jS4CyzbWKidLCQkIWBctlw5kt2YBlgYkdP3/jhfayfH5/p8773n+t7L5/mQjvz9fj6f77nvz/1ev+73fs/3nG+qCklSO35otQuQJJ1bBr8kNcbgl6TGGPyS1BiDX5IaY/BLUmMMfklqjMEvSY0x+CWpMeetdgHjbN68ubZt27baZUjSunH//ff/ZVXN9Bm7JoN/27ZtHD58eLXLkKR1I8n/6jvWUz2S1BiDX5IaY/BLUmMMfklqjMEvSY2ZGPxJtib5fJLHkjyS5JfGjEmSDyY5kuShJFcO9V2f5Ovd4/ppT0CStDh9Luc8BfxKVT2Q5MXA/UkOVtWjQ2PeBFzSPV4D/C7wmiQvA24G5oDqtt1fVd+a6iwkSb1NPOKvqier6oFu+TvAY8CFI8N2Ah+rgfuAlya5AHgjcLCqTnZhfxDYMdUZSJIWZVHn+JNsA64AvjTSdSHwxND6fNe2ULskaZX0fudukhcBnwJ+uaq+Pdo9ZpM6S/u4598D7AGYnZ3tW5bWgG03/qfnrX/zA/9glSrRaa/66KvOaPvEvzn1vPVXfPWxc1WO1pheR/xJNjII/T+oqk+PGTIPbB1a3wIcO0v7Gapqb1XNVdXczEyvj5uQJC1Bn6t6AnwEeKyqfnOBYfuBt3VX91wFPF1VTwJ3A9cm2ZRkE3Bt1yZJWiV9TvVcDbwVeDjJg13brwKzAFV1G3AAeDNwBHgGeEfXdzLJ+4FD3Xa3VNXJ6ZUvSVqsicFfVf+N8efqh8cU8J4F+vYB+5ZUnSRp6nznriQ1xuCXpMYY/JLUGINfkhpj8EtSYwx+SWqMwS9JjTH4JakxBr8kNcbgl6TGGPyS1BiDX5IaY/BLUmMMfklqjMEvSY0x+CWpMQa/JDVm4h24kuwDfho4XlU/Mab/XwG/MPR8rwBmutsufhP4DvAccKqq5qZVuCRpafoc8d8O7Fios6p+o6our6rLgfcC/2Xkvrqv6/oNfUlaAyYGf1XdC/S9Qfpu4I5lVSRJWlFTO8ef5G8y+MvgU0PNBXwuyf1J9kzra0mSlm7iOf5F+IfAfx85zXN1VR1L8qPAwSRf7f6COEP3i2EPwOzs7BTLkiQNm+ZVPbsYOc1TVce6f48DnwG2L7RxVe2tqrmqmpuZmZliWZKkYVMJ/iQvAV4L/PFQ2w8nefHpZeBa4CvT+HqSpKXrcznnHcA1wOYk88DNwEaAqrqtG/azwOeq6v8MbfpjwGeSnP46f1hVfzq90iVJSzEx+Ktqd48xtzO47HO47Shw2VILkyStDN+5K0mNMfglqTEGvyQ1xuCXpMYY/JLUGINfkhpj8EtSYwx+SWqMwS9JjTH4JakxBr8kNcbgl6TGGPyS1BiDX5IaY/BLUmMMfklqjMEvSY2ZGPxJ9iU5nmTs/XKTXJPk6SQPdo+bhvp2JHk8yZEkN06zcEnS0vQ54r8d2DFhzH+tqsu7xy0ASTYAtwJvAi4Fdie5dDnFSpKWb2LwV9W9wMklPPd24EhVHa2qZ4E7gZ1LeB5J0hRN6xz/TyX5cpK7kryya7sQeGJozHzXNlaSPUkOJzl84sSJKZUlSRo1jeB/ALioqi4Dfhv4o649Y8bWQk9SVXuraq6q5mZmZqZQliRpnGUHf1V9u6q+2y0fADYm2czgCH/r0NAtwLHlfj1J0vIsO/iT/HiSdMvbu+d8CjgEXJLk4iTnA7uA/cv9epKk5Tlv0oAkdwDXAJuTzAM3AxsBquo24C3Au5OcAr4H7KqqAk4luQG4G9gA7KuqR1ZkFpKk3iYGf1XtntD/IeBDC/QdAA4srTRJ0krwnbuS1BiDX5IaY/BLUmMMfklqjMEvSY0x+CWpMQa/JDXG4Jekxhj8ktQYg1+SGmPwS1JjDH5JaozBL0mNMfglqTEGvyQ1xuCXpMYY/JLUmInBn2RfkuNJvrJA/y8keah7fDHJZUN930zycJIHkxyeZuGSpKXpc8R/O7DjLP1/Aby2ql4NvB/YO9L/uqq6vKrmllaiJGma+txz994k287S/8Wh1fuALcsvS5K0UqZ9jv+dwF1D6wV8Lsn9SfacbcMke5IcTnL4xIkTUy5LknTaxCP+vpK8jkHw/52h5qur6liSHwUOJvlqVd07bvuq2kt3mmhubq6mVZck6fmmcsSf5NXA7wM7q+qp0+1Vdaz79zjwGWD7NL6eJGnplh38SWaBTwNvraqvDbX/cJIXn14GrgXGXhkkSTp3Jp7qSXIHcA2wOck8cDOwEaCqbgNuAn4E+J0kAKe6K3h+DPhM13Ye8IdV9acrMAdJ0iL0uapn94T+dwHvGtN+FLjszC0kSavJd+5KUmMMfklqjMEvSY0x+CWpMQa/JDXG4Jekxhj8ktQYg1+SGmPwS1JjDH5JaozBL0mNMfglqTEGvyQ1xuCXpMYY/JLUGINfkhpj8EtSY3oFf5J9SY4nGXvP3Ax8MMmRJA8luXKo7/okX+8e10+rcEnS0vQ94r8d2HGW/jcBl3SPPcDvAiR5GYN79L4G2A7cnGTTUouVJC1fr+CvqnuBk2cZshP4WA3cB7w0yQXAG4GDVXWyqr4FHOTsv0AkSSts4s3We7oQeGJofb5rW6j9DEn2MPhrgdnZ2SmVtXi3/pN7nrf+ntv+3ipVso792ktG1p9e9FP8+5//6eet/8rHP7ucitSD3/NFGv05h4k/62slX6b14m7GtNVZ2s9srNpbVXNVNTczMzOlsiRJo6YV/PPA1qH1LcCxs7RLklbJtIJ/P/C27uqeq4Cnq+pJ4G7g2iSbuhd1r+3aJEmrpNc5/iR3ANcAm5PMM7hSZyNAVd0GHADeDBwBngHe0fWdTPJ+4FD3VLdU1dleJJYkrbBewV9Vuyf0F/CeBfr2AfsWX5okaSX4zl1JaozBL0mNMfglqTEGvyQ1xuCXpMYY/JLUGINfkhpj8EtSYwx+SWqMwS9JjTH4JakxBr8kNcbgl6TGGPyS1BiDX5IaY/BLUmN6BX+SHUkeT3IkyY1j+n8ryYPd42tJ/mqo77mhvv3TLF6StHgT78CVZANwK/AGBjdPP5Rkf1U9enpMVf3zofH/DLhi6Cm+V1WXT69kSdJy9Dni3w4cqaqjVfUscCew8yzjdwN3TKM4SdL09Qn+C4Enhtbnu7YzJLkIuBi4Z6j5hUkOJ7kvyc8suVJJ0lT0udl6xrTVAmN3AZ+squeG2mar6liSlwP3JHm4qr5xxhdJ9gB7AGZnZ3uUJUlaij5H/PPA1qH1LcCxBcbuYuQ0T1Ud6/49CnyB55//Hx63t6rmqmpuZmamR1mSpKXoE/yHgEuSXJzkfAbhfsbVOUn+NrAJ+B9DbZuSvKBb3gxcDTw6uq0k6dyZeKqnqk4luQG4G9gA7KuqR5LcAhyuqtO/BHYDd1bV8GmgVwAfTvLXDH7JfGD4aiBJ0rnX5xw/VXUAODDSdtPI+q+N2e6LwKuWUZ8kacp8564kNcbgl6TGGPyS1BiDX5IaY/BLUmMMfklqjMEvSY0x+CWpMQa/JDXG4Jekxhj8ktQYg1+SGmPwS1JjDH5JaozBL0mNMfglqTEGvyQ1plfwJ9mR5PEkR5LcOKb/7UlOJHmwe7xrqO/6JF/vHtdPs3hJ0uJNvPVikg3ArcAbgHngUJL9Y+6d+/GqumFk25cBNwNzQAH3d9t+ayrVS5IWrc8R/3bgSFUdrapngTuBnT2f/43Awao62YX9QWDH0kqVJE1Dn+C/EHhiaH2+axv1c0keSvLJJFsXua0k6RzpE/wZ01Yj638CbKuqVwN/Bnx0EdsOBiZ7khxOcvjEiRM9ypIkLUWf4J8Htg6tbwGODQ+oqqeq6vvd6u8BP9l326Hn2FtVc1U1NzMz06d2SdIS9An+Q8AlSS5Ocj6wC9g/PCDJBUOr1wGPdct3A9cm2ZRkE3Bt1yZJWiUTr+qpqlNJbmAQ2BuAfVX1SJJbgMNVtR/4xSTXAaeAk8Dbu21PJnk/g18eALdU1ckVmIckqaeJwQ9QVQeAAyNtNw0tvxd47wLb7gP2LaNGSdIU+c5dSWqMwS9JjTH4JakxBr8kNcbgl6TGGPyS1BiDX5IaY/BLUmMMfklqjMEvSY0x+CWpMQa/JDXG4Jekxhj8ktQYg1+SGmPwS1JjDH5Jakyv4E+yI8njSY4kuXFM/79I8miSh5L85yQXDfU9l+TB7rF/dFtJ0rk18daLSTYAtwJvAOaBQ0n2V9WjQ8P+JzBXVc8keTfw74Cf7/q+V1WXT7luSdIS9Tni3w4cqaqjVfUscCewc3hAVX2+qp7pVu8Dtky3TEnStPQJ/guBJ4bW57u2hbwTuGto/YVJDie5L8nPLKFGSdIUTTzVA2RMW40dmPxjYA547VDzbFUdS/Jy4J4kD1fVN8ZsuwfYAzA7O9ujLEnSUvQ54p8Htg6tbwGOjQ5K8nrgXwPXVdX3T7dX1bHu36PAF4Arxn2RqtpbVXNVNTczM9N7ApKkxekT/IeAS5JcnOR8YBfwvKtzklwBfJhB6B8fat+U5AXd8mbgamD4RWFJ0jk28VRPVZ1KcgNwN7AB2FdVjyS5BThcVfuB3wBeBPzHJAD/u6quA14BfDjJXzP4JfOBkauBJEnnWJ9z/FTVAeDASNtNQ8uvX2C7LwKvWk6BkqTp8p27ktQYg1+SGmPwS1JjDH5JaozBL0mNMfglqTEGvyQ1xuCXpMYY/JLUGINfkhpj8EtSYwx+SWqMwS9JjTH4JakxBr8kNcbgl6TGGPyS1JhewZ9kR5LHkxxJcuOY/hck+XjX/6Uk24b63tu1P57kjdMrXZK0FBODP8kG4FbgTcClwO4kl44Meyfwrar6W8BvAf+22/ZSBjdnfyWwA/id7vkkSaukzxH/duBIVR2tqmeBO4GdI2N2Ah/tlj8J/P0M7rq+E7izqr5fVX8BHOmeT5K0SvoE/4XAE0Pr813b2DFVdQp4GviRnttKks6h83qMyZi26jmmz7aDJ0j2AHu61e8mebxHbadtBv5yEeN7u+HDK/GsZ7ViczlXRnb6Zt6XZc/nX35i3I/Sqli3+2f0/CwJnGU+a+h7vhiru3/et7jv2YR8WexcLuo7sE/wzwNbh9a3AMcWGDOf5DzgJcDJntsCUFV7gb39yn6+JIeram4p2641P0hzAeez1jmftWsl59LnVM8h4JIkFyc5n8GLtftHxuwHru+W3wLcU1XVte/qrvq5GLgE+PPplC5JWoqJR/xVdSrJDcDdwAZgX1U9kuQW4HBV7Qc+AvyHJEcYHOnv6rZ9JMkngEeBU8B7quq5FZqLJKmHPqd6qKoDwIGRtpuGlv8v8I8W2PbXgV9fRo19LOkU0Rr1gzQXcD5rnfNZu1ZsLhmckZEktcKPbJCkxqyb4F/Ox0asRT3m8/YkJ5I82D3etRp19pFkX5LjSb6yQH+SfLCb60NJrjzXNS5Gj/lck+TpoX1z07hxa0WSrUk+n+SxJI8k+aUxY9bFPuo5l3Wzf5K8MMmfJ/lyN5/3jRkz/WyrqjX/YPCi8jeAlwPnA18GLh0Z80+B27rlXcDHV7vuZc7n7cCHVrvWnvP5u8CVwFcW6H8zcBeDS/yvAr602jUvcz7XAJ9d7ToXMZ8LgCu75RcDXxvz87Yu9lHPuayb/dN9v1/ULW8EvgRcNTJm6tm2Xo74l/OxEWtRn/msG1V1L4OruRayE/hYDdwHvDTJBeemusXrMZ91paqerKoHuuXvAI9x5jvo18U+6jmXdaP7fn+3W93YPUZfeJ16tq2X4F/Ox0asRX0/yuLnuj+7P5lk65j+9eIH8aM7fqr78/yuJK9c7WL66k4TXMHgyHLYuttHZ5kLrKP9k2RDkgeB48DBqlpw30wr29ZL8C/nYyPWoj61/gmwrapeDfwZ//83/nq0nvZNHw8AF1XVZcBvA3+0yvX0kuRFwKeAX66qb492j9lkze6jCXNZV/unqp6rqssZfLLB9iQ/MTJk6vtmvQT/Yj42gpGPjViLJs6nqp6qqu93q78H/OQ5qm0l9P7ojvWgqr59+s/zGrzHZWOSzatc1lkl2cggKP+gqj49Zsi62UeT5rIe9w9AVf0V8AUGH2E/bOrZtl6CfzkfG7EWTZzPyPnV6xicy1yv9gNv664cuQp4uqqeXO2ilirJj58+x5pkO4P/R0+tblUL62r9CPBYVf3mAsPWxT7qM5f1tH+SzCR5abf8N4DXA18dGTb1bOv1zt3VVsv42Ii1qOd8fjHJdQw+6uIkg6t81qQkdzC4kmJzknngZgYvUlFVtzF41/ebGdyP4RngHatTaT895vMW4N1JTgHfA3at4YMMgKuBtwIPd+eSAX4VmIV1t4/6zGU97Z8LgI9mcIOqHwI+UVWfXels8527ktSY9XKqR5I0JQa/JDXG4Jekxhj8ktQYg1+SGmPwS1JjDH5JaozBL0mN+X8AGP59qBSPDgAAAABJRU5ErkJggg==\n",
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
@@ -2405,16 +2126,16 @@
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.15.4\n",
      "202 ms ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n",
      "73.7 ms ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n"
      "207 ms ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n",
      "77.7 ms ± 0 ns per loop (mean ± std. dev. of 1 run, 1 loop each)\n"
     ]
    }
   ],
@@ -2437,13 +2158,183 @@
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "numpy.random.uniform is a type of probability distribution which each variable has the identical probability that it will be the outcome, all of the possible outcomes are equally likely. eg. a coin has an equal probability of getting heads or tails so it can be classed as having a uniform distribution. The same can be said about a deck of cards.  There are four suits and the chances of choosing either a diamond, heart, spade or club are the same.\n",
    "\n",
    "There are 2 types of uniform distributions: continuous and discrete. With continuous each variable has an equal chance of being chosen and there can be a  infinite number of permutations.   \n",
    "\n",
    "\n",
    "Discrete distribution has a fixed list of possible values, it can not be subdivided and there may be a repeat of a value. Eg. with the throw of a dice it will always be between 1 and 6."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The random.random() function takes no parameters while random.uniform() takes two parameters, i.e., start and stop.\n",
    "The random.random() function generates a random float number between 0.0 to 1.0, but never returns 1.0.  random.uniform(start, stop) generates a random float number between the start (a) and stop (b) number.  Rounding may end up giving you b."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random float number is  0.24245292641197957\n"
     ]
    }
   ],
   "source": [
    "# random float from a uniform distribution between 0 and 1\n",
    "\n",
    "\n",
    "print(\"Random float number is \", np.random.uniform())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 2.33254931,  1.36354653, -1.57598191, -2.09703637, -1.23928989,\n",
       "       -0.7207314 ])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 6 random floats from  -5 to  5\n",
    "\n",
    "np.random.uniform(-5.0, 5, 6)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random float number with two decimal places is  0.49\n",
      "Random float number between 5 and 30.5 with three decimal places is  17.674\n"
     ]
    }
   ],
   "source": [
    "print(\"Random float number with two decimal places is \", round(random.random(), 2))\n",
    "print(\"Random float number between 5 and 30.5 with three decimal places is \", round(random.uniform(5,30.5), 3))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "it took:  0.022937774658203125\n",
      "it took:  0.22539734840393066\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import time\n",
    "rang = 10000\n",
    "tic = time.time()\n",
    "for i in range(rang):\n",
    "    sampl = np.random.uniform(low=0, high=5, size=(10))\n",
    "print(\"it took: \", time.time() - tic)\n",
    "\n",
    "tic = time.time()\n",
    "for i in range(rang):\n",
    "    ran_floats = [np.random.uniform(0,3) for _ in range(20)]\n",
    "print(\"it took: \", time.time() - tic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(np.random.uniform(low=0.0, high=1.0, size=1000), bins=35, color='Y', alpha=1)\n",
    "plt.xlabel(\"Probability\")\n",
    "plt.title(\"Uniform Distribution\")\n",
    "plt.show()"
   ]
  },
